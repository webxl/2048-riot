'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

if (typeof Object.assign !== 'function') {
  Object.assign = function (target) {
    'use strict';

    if (target === null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }

    target = Object(target);
    for (var index = 1; index < arguments.length; index++) {
      var source = arguments[index];
      if (source !== null) {
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
    }
    return target;
  };
}

function Game(_opts) {
  var _this = this;

  var DEFAULT_SIZE = 4;
  var DEFAULT_GOAL = 2048;
  var DEFAULT_NEW_BLOCK_COUNT = 1;
  var NEW_BLOCK_VAL_HIGH = 4;
  var NEW_BLOCK_VAL_LOW = 2;
  var HIGH_LOW_RATIO = .75;
  var HIGH_BLOCK_PERMITTED = 1 / 256;

  var opts = Object.assign({
    size: DEFAULT_SIZE,
    goal: DEFAULT_GOAL,
    newBlockCount: DEFAULT_NEW_BLOCK_COUNT

  }, _opts);

  this.boardUndoStack = [];
  this.boardRedoStack = [];
  this.scoreUndoStack = [];
  this.scoreRedoStack = [];

  this.score = 0;
  this.opts = opts;

  this.getStartBlocks = function (blocks, boardSize) {
    var loc = [Math.floor(boardSize * Math.random()), Math.floor(boardSize * Math.random())];
    if (!blocks.some(function (b) {
      return b[0] == loc[0] && b[1] == loc[1];
    })) {
      blocks.push(loc);
      return blocks;
    } else {
      return _this.getStartBlocks(blocks, boardSize);
    }
  };

  this.gameStatus = function () {
    return _this.status;
  };

  this.getNewBlocks = function (matrix, count, newBlocks) {
    if (0 == count--) return newBlocks;
    var boardSize = matrix.length,
        available = [];
    var newMatrix = cloneMatrix(matrix);
    for (var i = 0; i < boardSize; i++) {
      for (var j = 0; j < boardSize; j++) {
        if (!matrix[i][j].val) available.push({ y: i, x: j });
      }
    }

    if (!available.length) return newBlocks;

    var c = available[Math.floor(available.length * Math.random())];
    newBlocks.push(c);
    newMatrix[c.y][c.x].val = 2;
    return _this.getNewBlocks(newMatrix, count, newBlocks);
  };

  this.maybeGetBlock = function (blocks, x, y) {
    var val = blocks.some(function (b) {
      return b[0] == x && b[1] == y;
    }) ? 2 : 0;
    return { val: val, combined: false, startY: y, startX: x, moved: 0 };
  };

  this.newGame = function (newOpts) {
    _this.status = 'active';
    opts = Object.assign({}, opts, newOpts);
    _this.boardSize = opts.size;
    _this.maxBlockValue = 2;
    _this.boardUndoStack = [];
    _this.boardRedoStack = [];
    _this.scoreUndoStack = [];
    _this.scoreRedoStack = [];

    var newGoal = void 0;

    switch (_this.boardSize) {
      case 2:
        newGoal = 32;break;
      case 3:
        newGoal = 512;break;
      case 4:
        newGoal = 2048;break;
      case 5:
        newGoal = 8192;break;
      default:
        newGoal = 32768;break;
    }

    _this.opts.goal = opts.goal = newGoal;

    var gameBlocks = _this.getStartBlocks([], _this.boardSize);
    gameBlocks = _this.getStartBlocks(gameBlocks, _this.boardSize);

    _this.rows = [];
    _this.score = 0;

    for (var i = 0; i < _this.boardSize; i++) {
      var row = [];
      for (var j = 0; j < _this.boardSize; j++) {
        row.push(_this.maybeGetBlock(gameBlocks, i, j));
      }
      _this.rows.push(row);
    }
    _this.rows = _this.updateProps(_this.rows);
  };

  this.combineValuesUp = function (matrix, secondPass) {
    var size = matrix.length,
        combined = cloneMatrix(matrix);

    for (var x = 0; x < size; x++) {
      var size_r = size;
      for (var y = 0; y < size_r - 1; y++) {
        var curBlock = combined[y][x],
            nextBlock = combined[y + 1][x];

        if (curBlock.val === 0) {
          var y1 = void 0;
          for (y1 = y; y1 < size_r - 1; y1++) {
            combined[y1][x] = Object.assign({}, combined[y1 + 1][x]);
          }
          combined[y1][x].val = 0;
          y--;size_r--;
        } else {
          if (curBlock.val === nextBlock.val && !curBlock.combined && !nextBlock.combined) {
            var _y = void 0;
            var newValue = curBlock.val * 2;

            combined[y][x] = Object.assign({}, nextBlock, { combined: { y: curBlock.startY, x: curBlock.startX }, val: newValue });
            nextBlock.val = 0;
            for (_y = y + 1; _y < size_r - 1; _y++) {
              combined[_y][x] = Object.assign({}, combined[_y + 1][x]);
            }
            combined[_y][x].val = 0;
            y--;size_r--;
          }
        }
      }
    }

    if (!secondPass) {
      return _this.combineValuesUp(combined, true);
    }
    return combined;
  };

  this.getBlockMovements = function (direction) {
    var size = _this.rows.length,
        blocks = [];

    var preview = _this.moveBlocks(direction);

    for (var y = 0; y < size; y++) {
      blocks.push(new Array(size));
      for (var x = 0; x < size; x++) {
        blocks[y][x] = 0;
      }
    }
    for (var _y2 = 0; _y2 < size; _y2++) {
      for (var _x = 0; _x < size; _x++) {
        //  let block = this.rows[y][x];
        var newBlock = preview[_y2][_x];

        var dx = 0,
            dy = 0;

        switch (direction) {
          case 'up':
          case 'down':
            dy = _y2 - newBlock.startY;break;
          case 'left':
          case 'right':
            dx = _x - newBlock.startX;break;
        }
        //console.log(y,x,dy,dx,n,block,newBlock)

        if ((dy || dx) && newBlock.val) blocks[newBlock.startY][newBlock.startX] = { dy: dy, dx: dx };

        if (newBlock.combined) {
          var _dx = 0,
              _dy = 0;
          switch (direction) {
            case 'up':
            case 'down':
              _dy = _y2 - newBlock.combined.y;break;
            case 'left':
            case 'right':
              _dx = _x - newBlock.combined.x;break;
          }
          //console.log(y,x,dy,dx,newBlock.combined)

          if ((_dy || _dx) && newBlock.val) blocks[newBlock.combined.y][newBlock.combined.x] = { dy: _dy, dx: _dx, removed: true };
          blocks[_y2][_x] = Object.assign({ combined: true }, blocks[_y2][_x]);
        }
      }
    }

    return blocks;
  };

  this.possibleMoves = function (matrix, y, x) {
    var size = _this.rows.length,
        moves = [];
    var nbs = [[-1, 0, 'up'], [0, -1, 'left'], [0, 1, 'right'], [1, 0, 'down']];
    for (var j = 0; j < nbs.length; j++) {
      var y1 = y + nbs[j][0],
          x1 = x + nbs[j][1];
      if (x1 >= 0 && y1 >= 0 && x1 < size && y1 < size) {
        if (matrix[y][x].val && (matrix[y1][x1].val == matrix[y][x].val || !matrix[y1][x1].val)) moves.push(nbs[j][2]);
      }
    }
    return moves;
  };

  this.getNewBlockValue = function (notRandom) {
    return _this.maxBlockValue >= opts.goal * HIGH_BLOCK_PERMITTED && (notRandom || Math.random() > HIGH_LOW_RATIO) ? NEW_BLOCK_VAL_HIGH : NEW_BLOCK_VAL_LOW;
  };

  this.processMove = function (direction) {

    var size = _this.rows.length,
        moves = [];

    if (_this.status !== 'active') return;

    for (var y = 0; y < size; y++) {
      for (var x = 0; x < size; x++) {
        if (_this.rows[y][x].possibleMoves.length) moves.push(_this.rows[y][x].possibleMoves);
      }
    }

    if (!moves.some(function (b) {
      return b.some(function (m) {
        return m === direction;
      });
    })) return;

    _this.boardUndoStack.push(_this.rows);
    _this.boardRedoStack = [];

    _this.rows = _this.moveBlocks(direction);

    if (_this.checkWin()) return;

    _this.newBlocks = _this.getNewBlocks(_this.rows, opts.newBlockCount, []);
    var newVal = _this.getNewBlockValue();
    _this.newBlocks.forEach(function (c) {
      Object.assign(_this.rows[c.y][c.x], getDefaults(c.y, c.x, newVal, null), { isNew: true });
    });

    _this.scoreUndoStack.push(_this.score);
    _this.scoreRedoStack = [];

    _this.score += _this.getMoveScore(_this.rows);

    _this.rows = _this.updateProps(_this.rows);

    _this.checkLoss();
  };

  this.checkWin = function () {
    var size = _this.rows.length;
    _this.maxBlockValue = NEW_BLOCK_VAL_LOW;
    for (var y = 0; y < size; y++) {
      for (var x = 0; x < size; x++) {
        if (_this.rows[y][x].val >= _this.maxBlockValue) {
          _this.maxBlockValue = _this.rows[y][x].val;
        }
      }
    }
    if (_this.maxBlockValue >= opts.goal) {
      _this.status = 'win';
      return true;
    }

    return false;
  };

  this.checkLoss = function () {
    var size = _this.rows.length,
        moves = [];
    for (var y = 0; y < size; y++) {
      for (var x = 0; x < size; x++) {
        moves.push(_this.rows[y][x].possibleMoves);
      }
    }
    if (!moves.some(function (b) {
      return b.length != 0;
    })) {
      _this.status = 'loss';return true;
    }

    return false;
  };

  this.moveBlocks = function (direction) {
    return _this.transformMatrix(direction, _this.combineValuesUp);
  };

  this.undo = function () {
    if (_this.boardUndoStack.length) {
      _this.status = 'active';
      var redo = _this.rows,
          redoScore = _this.score;
      _this.rows = _this.boardUndoStack.pop();
      _this.score = _this.scoreUndoStack.pop();
      _this.boardRedoStack.push(redo);
      _this.scoreRedoStack.push(redoScore);
    }
  };

  this.redo = function () {
    if (_this.boardRedoStack.length) {
      var undo = _this.rows,
          undoScore = _this.score;
      _this.rows = _this.boardRedoStack.pop();
      _this.score = _this.scoreRedoStack.pop();
      _this.boardUndoStack.push(undo);
      _this.scoreUndoStack.push(undoScore);
      _this.checkWin();
      _this.checkLoss();
    }
  };

  // matrix helpers

  this.transpose = function (matrix) {
    var size = matrix.length,
        trans = new Array(size);
    for (var y = 0; y < size; y++) {
      trans[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        trans[y][x] = Object.assign({}, matrix[x][y]);
      }
    }
    return trans;
  };

  this.reverseEachRow = function (matrix) {

    var size = matrix.length,
        reversed = new Array(size);
    for (var y = 0; y < size; y++) {
      reversed[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        reversed[y][x] = Object.assign({}, matrix[y][size - x - 1]);
      }
    }
    return reversed;
  };

  this.reverseEachColumn = function (matrix) {

    var size = matrix.length,
        reversed = new Array(size);
    for (var y = 0; y < size; y++) {
      reversed[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        reversed[y][x] = Object.assign({}, matrix[size - y - 1][x]);
      }
      //reversed[y] = Object.assign({}, matrix[size - y - 1]);
    }
    return reversed;
  };

  this.printMatrix = function (matrix) {
    var size = matrix.length;
    console.log('----');
    for (var y = 0; y < size; y++) {
      var row = '';
      for (var x = 0; x < size; x++) {
        row += matrix[y][x].val + ' ';
      }
      console.log(row);
    }
    console.log('----');
  };

  this.rotate = function (direction, matrix) {
    switch (direction) {
      case 'left':
        return _this.reverseEachColumn(_this.transpose(matrix));
      case 'right':
        return _this.reverseEachRow(_this.transpose(matrix));
      default:
        break;
    }
    return matrix;
  };

  this.flip = function (matrix) {
    return _this.reverseEachRow(_this.reverseEachColumn(cloneMatrix(matrix)));
  };

  this.transformMatrix = function (direction, combineFn) {
    switch (direction) {
      case 'left':
        return _this.rotate('left', combineFn.call(_this, _this.rotate('right', _this.rows)));
        break;
      case 'right':
        return _this.rotate('right', combineFn.call(_this, _this.rotate('left', _this.rows)));
        break;
      case 'up':
        return combineFn.call(_this, _this.rows);
        break;
      case 'down':
        return _this.flip(combineFn.call(_this, _this.flip(_this.rows)));
        break;
      default:
        return;break;
    }
  };

  this.addProps = function (matrix) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        newMatrix[y][x] = getDefaults(y, x, matrix[y][x], []);
      }
    }
    return _this.updateProps(newMatrix);
  };

  this.removeProps = function (matrix) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = Array(size);
      for (var x = 0; x < size; x++) {
        newMatrix[y][x] = matrix[y][x].val;
      }
    }
    return newMatrix;
  };

  this.updateProps = function (matrix) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        newMatrix[y][x] = getDefaults(y, x, matrix[y][x].val, _this.possibleMoves(matrix, y, x));
      }
    }
    return newMatrix;
  };

  this.getMoveScore = function (matrix) {
    var moveScore = 0;
    var size = matrix.length;
    for (var y = 0; y < size; y++) {
      for (var x = 0; x < size; x++) {
        if (matrix[y][x].combined) {
          moveScore += matrix[y][x].val;
        }
      }
    }
    return moveScore;
  };

  function getDefaults(y, x, val, moves) {
    return {
      val: val,
      combined: false,
      startY: y,
      startX: x,
      moved: 0,
      possibleMoves: moves,
      isNew: false
    };
  }
  function cloneMatrix(matrix) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = Array(size);
      for (var x = 0; x < size; x++) {
        if (_typeof(matrix[y][x]) == 'object') newMatrix[y][x] = Object.assign({}, matrix[y][x]);
        //else
        //newMatrix[y][x] = matrix[y][x];
      }
    }
    return newMatrix;
  }
}
//# sourceMappingURL=data:application/json;base64,
'use strict';

riot.tag2('about', '<div> <div class="close" onclick="{closeAbout}">x</div> <h2>2048 <small>Enhanced!</small></h2> <p> By Matt Motherway </p> <p> Object: Use the arrow keys or swipe to get at least one block face value to {opts.goal}. </p> <p> <a href="https://github.com/webxl/2048-riot" onclick="{goToThisUrl}">GitHub Project</a> </p> </div>', '', '', function (opts) {

  this.closeAbout = function () {
    this.parent.aboutVisible = false;
    this.unmount(true);
    this.parent.update();
  }.bind(this);
  this.goToThisUrl = function (e) {

    window.location = e.target.href;
  }.bind(this);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFib3V0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsS0FBSyxJQUFMLENBQVUsT0FBVixFQUFtQixxVUFBbkIsRUFBMFYsRUFBMVYsRUFBOFYsRUFBOVYsRUFBa1csVUFBUyxJQUFULEVBQWU7O0FBRTdXLE9BQUssVUFBTCxHQUFrQixZQUFXO0FBQzNCLFNBQUssTUFBTCxDQUFZLFlBQVosR0FBMkIsS0FBM0I7QUFDQSxTQUFLLE9BQUwsQ0FBYSxJQUFiO0FBQ0EsU0FBSyxNQUFMLENBQVksTUFBWjtBQUNELEdBSmlCLENBSWhCLElBSmdCLENBSVgsSUFKVyxDQUFsQjtBQUtBLE9BQUssV0FBTCxHQUFtQixVQUFTLENBQVQsRUFBWTs7QUFFN0IsV0FBTyxRQUFQLEdBQWtCLEVBQUUsTUFBRixDQUFTLElBQTNCO0FBQ0QsR0FIa0IsQ0FHakIsSUFIaUIsQ0FHWixJQUhZLENBQW5CO0FBSUgsQ0FYRCIsImZpbGUiOiJhYm91dC5qcyIsInNvdXJjZXNDb250ZW50IjpbInJpb3QudGFnMignYWJvdXQnLCAnPGRpdj4gPGRpdiBjbGFzcz1cImNsb3NlXCIgb25jbGljaz1cIntjbG9zZUFib3V0fVwiPng8L2Rpdj4gPGgyPjIwNDggPHNtYWxsPkVuaGFuY2VkITwvc21hbGw+PC9oMj4gPHA+IEJ5IE1hdHQgTW90aGVyd2F5IDwvcD4gPHA+IE9iamVjdDogVXNlIHRoZSBhcnJvdyBrZXlzIG9yIHN3aXBlIHRvIGdldCBhdCBsZWFzdCBvbmUgYmxvY2sgZmFjZSB2YWx1ZSB0byB7b3B0cy5nb2FsfS4gPC9wPiA8cD4gPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS93ZWJ4bC8yMDQ4LXJpb3RcIiBvbmNsaWNrPVwie2dvVG9UaGlzVXJsfVwiPkdpdEh1YiBQcm9qZWN0PC9hPiA8L3A+IDwvZGl2PicsICcnLCAnJywgZnVuY3Rpb24ob3B0cykge1xuXG4gICAgdGhpcy5jbG9zZUFib3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnBhcmVudC5hYm91dFZpc2libGUgPSBmYWxzZTtcbiAgICAgIHRoaXMudW5tb3VudCh0cnVlKTtcbiAgICAgIHRoaXMucGFyZW50LnVwZGF0ZSgpO1xuICAgIH0uYmluZCh0aGlzKVxuICAgIHRoaXMuZ29Ub1RoaXNVcmwgPSBmdW5jdGlvbihlKSB7XG5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGUudGFyZ2V0LmhyZWY7XG4gICAgfS5iaW5kKHRoaXMpXG59KTsiXX0=
'use strict';

riot.tag2('app', '<header> <div class="controls"> <button type="button" name="button" id="newGame" onclick="{newGame}">New Game</button> <div class="sizeWrapper"> <button type="button" name="button" id="setSize" onclick="{showSizeDropdown}">Size: {boardSize} &#9660; </button> <size if="{settingSize()}"></size> </div> <div class="undoWrapper"> <button id="undo" onclick="{undoClick}" __disabled="{getUndoDisabledProp()}">Undo</button> <button id="redo" onclick="{redoClick}" __disabled="{getRedoDisabledProp()}">Redo</button> </div> </div> <goal title="Use the arrow keys or swipe to get at least one block face value to {goal}" onclick="{showAbout}">{goal}</goal> <about if="{aboutVisible}" goal="{goal}"></about> <score></score> </header> <winlose class="{gameStatus}" gamestatus="{gameStatus}"></winlose> <board ref="board" game="{game}"></board> <div class="status"> Game status: <input onkeydown="{handleKeyDown}" onkeypress="{handleKeyPress}" onclick="{updateGame}" ref="input" name="test" value="{gameStatus}" readonly> </div>', '', 'onclick="{setFocus}"', function (opts) {
  var _this = this;

  var DRAG_ENABLED = false;

  this.boardSize = 4;
  this.gameScore = 0;
  this.aboutVisible = false;
  this.settingBoardSize = false;

  this.game = new Game({
    size: this.boardSize
  });
  this.game.newGame();

  this.goal = this.game.opts.goal;

  this.isTouchEnabled = "ontouchstart" in document.documentElement;

  this.on('mount', function () {

    setTimeout(_this.setFocus, 300);

    document.documentElement.className += _this.isTouchEnabled ? ' touch' : ' no-touch';

    var mc = new Hammer.Manager(_this.refs.board.root);

    var swipe = new Hammer.Swipe({
      threshold: 20
    });

    if (DRAG_ENABLED) {
      var pan = new Hammer.Pan({
        threshold: 5
      });
      pan.recognizeWith(swipe);
      mc.add(pan);
      mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });

      mc.on("pan", function (ev) {
        var dir = void 0,
            axis = void 0;

        switch (ev.direction) {
          case Hammer.DIRECTION_LEFT:
            dir = 'left';axis = 'x';break;
          case Hammer.DIRECTION_RIGHT:
            dir = 'right';axis = 'x';break;
          case Hammer.DIRECTION_UP:
            dir = 'up';axis = 'y';break;
          case Hammer.DIRECTION_DOWN:
            dir = 'down';axis = 'y';break;
        }

        vent.trigger('drag', dir, axis === 'x' ? ev.deltaX : 0, axis === 'y' ? ev.deltaY : 0);
      });

      mc.on("panstart1", function (ev) {
        var START_X = 0,
            START_Y = 0;
        var dir = void 0;

        switch (ev.direction) {
          case Hammer.DIRECTION_LEFT:
            dir = 'left';break;
          case Hammer.DIRECTION_RIGHT:
            dir = 'right';break;
          case Hammer.DIRECTION_UP:
            dir = 'up';break;
          case Hammer.DIRECTION_DOWN:
            dir = 'down';break;
        }
      });
    }

    mc.add(swipe);

    mc.on('swipe', function (e) {
      var dir = void 0;
      switch (e.direction) {
        case Hammer.DIRECTION_LEFT:
          dir = 'left';break;
        case Hammer.DIRECTION_RIGHT:
          dir = 'right';break;
        case Hammer.DIRECTION_UP:
          dir = 'up';break;
        case Hammer.DIRECTION_DOWN:
          dir = 'down';break;
      }
      _this.sendMove(dir);
    });
  });

  this.handleKeyDown = function (e) {

    if (e.keyCode === 90 && (e.metaKey || e.ctrlKey)) {
      this.undoClick();
      return;
    }

    e.preventUpdate = true;

    var keys = {
      37: 'left',
      38: 'up',
      39: 'right',
      40: 'down'
    };
    this.sendMove(keys[e.keyCode]);
  }.bind(this);

  this.sendMove = function (dir) {
    if (!dir) return true;
    this.lastMoveDirection = dir;
    this.trigger('move', dir);
  }.bind(this);

  this.newGame = function (e) {
    this.game.newGame({
      size: this.boardSize
    });
    this.trigger('newgame');
    this.gameStatus = 'active';
    this.gameScore = 0;
    this.goal = this.game.opts.goal;

    this.updateGame();
  }.bind(this);

  this.setFocus = function (e) {
    if (this.isTouchEnabled) return;

    this.refs.input.focus();
    if (e) e.preventUpdate = true;
  }.bind(this);

  this.updateGame = function (e) {
    this.update();
  }.bind(this);

  this.undoClick = function () {
    this.game.undo();
    this.trigger('move');
  }.bind(this);

  this.redoClick = function () {
    this.game.redo();
    this.trigger('move');
  }.bind(this);

  this.on('move', function () {
    _this.gameStatus = _this.game.gameStatus();
    _this.gameScore = _this.game.score;
    _this.update();
  });

  this.handleKeyPress = function (e) {

    if (!(e.ctrlKey || e.metaKey || e.altKey)) {
      e.stopPropagation();
    }
  }.bind(this);

  this.getMovingClass = function () {
    return "moving-" + this.lastMoveDirection;
  }.bind(this);

  this.settingSize = function () {
    return this.settingBoardSize;
  }.bind(this);

  this.setBoardSize = function (val) {
    this.settingBoardSize = false;
    this.boardSize = val;
    this.update();
  }.bind(this);

  this.showSizeDropdown = function () {
    this.settingBoardSize = !this.settingBoardSize;
  }.bind(this);

  this.getUndoDisabledProp = function () {
    return this.game.boardUndoStack.length ? '' : 'disabled';
  }.bind(this);

  this.getRedoDisabledProp = function () {
    return this.game.boardRedoStack.length ? '' : 'disabled';
  }.bind(this);

  this.showAbout = function () {
    this.aboutVisible = true;
  }.bind(this);
});
//# sourceMappingURL=data:application/json;base64,
'use strict';

riot.tag2('block', '<label animate="{this.getAnimations()}" animate-leave="zoomOut" animate-duration="300ms">{opts.bv.val}</label>', '', 'class="{this.getLevelClass()}" riot-style="font-size: {opts.fontsize}"', function (opts) {
  var _this = this;

  this.mixin(riotAnimate);

  this.getAnimations = function () {
    var classes = [];
    if (opts.new) classes.push('bounceIn');
    if (_this.opts.combined) classes.push('flipInY');
    if (_this.moving) classes.push('fadeOut');
    return classes.join(' ');
  };

  this.getLevelClass = function () {
    var val = _this.opts.bv.val;
    var level = Math.log(val) / Math.log(2);
    return 'level' + level;
  };

  this.blockMargin = 0;

  var self = this;

  this.move = function () {

    var delta = self.opts.bv.delta;

    if (delta) {

      var marginAdjustX = delta.dx * self.blockMargin,
          marginAdjustY = delta.dy * self.blockMargin;

      self.moving = true;

      if (delta.removed) self.animatedUnmount();

      self.update();

      Velocity(self.root, {
        left: self.root.offsetWidth * delta.dx + marginAdjustX + 'px',
        top: self.root.offsetHeight * delta.dy + marginAdjustY + 'px'
      }, {
        duration: 100,
        complete: function complete() {
          self.moving = false;
        }
      });
    }
  };

  var adjustMargin = function adjustMargin(e) {

    if (this.root && this.root.parentElement) {
      var style = this.root.parentElement.currentStyle || window.getComputedStyle(this.root.parentElement);

      this.blockMargin = parseInt(style.marginRight, 10) * 2;
    }
  };

  this.on('updated', adjustMargin);

  this.drag = function (dir, dx, dy) {

    if (!self.opts.bv.possibleMoves.some(function (m) {
      return m === dir;
    })) return;

    var translate = 'translate3d(' + dx + 'px, ' + dy + 'px, 0)';
    self.root.style.transform = translate;
    self.root.style.mozTransform = translate;
    self.root.style.webkitTransform = translate;
  };

  vent.on('moveblocks', this.move);
  vent.on('drag', this.drag);

  this.on('before-unmount', function () {
    vent.off('moveblocks', this.move);
    vent.off('drag', this.drag);
  });
});
//# sourceMappingURL=data:application/json;base64,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VixDQUFnQixlQUFoQixHQUFrQyxTQUFsQztBQUVELEdBVEQ7O0FBV0EsT0FBSyxFQUFMLENBQVEsWUFBUixFQUFzQixLQUFLLElBQTNCO0FBQ0EsT0FBSyxFQUFMLENBQVEsTUFBUixFQUFnQixLQUFLLElBQXJCOztBQUVBLE9BQUssRUFBTCxDQUFRLGdCQUFSLEVBQTBCLFlBQVc7QUFDbkMsU0FBSyxHQUFMLENBQVMsWUFBVCxFQUF1QixLQUFLLElBQTVCO0FBQ0EsU0FBSyxHQUFMLENBQVMsTUFBVCxFQUFpQixLQUFLLElBQXRCO0FBQ0QsR0FIRDtBQUtILENBcEZEIiwiZmlsZSI6ImJsb2NrLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmlvdC50YWcyKCdibG9jaycsICc8bGFiZWwgYW5pbWF0ZT1cInt0aGlzLmdldEFuaW1hdGlvbnMoKX1cIiBhbmltYXRlLWxlYXZlPVwiem9vbU91dFwiIGFuaW1hdGUtZHVyYXRpb249XCIzMDBtc1wiPntvcHRzLmJ2LnZhbH08L2xhYmVsPicsICcnLCAnY2xhc3M9XCJ7dGhpcy5nZXRMZXZlbENsYXNzKCl9XCIgcmlvdC1zdHlsZT1cImZvbnQtc2l6ZToge29wdHMuZm9udHNpemV9XCInLCBmdW5jdGlvbihvcHRzKSB7XG4gICAgdGhpcy5taXhpbihyaW90QW5pbWF0ZSk7XG5cbiAgICB0aGlzLmdldEFuaW1hdGlvbnMgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjbGFzc2VzID0gW107XG4gICAgICBpZiAob3B0cy5uZXcpXG4gICAgICAgIGNsYXNzZXMucHVzaCgnYm91bmNlSW4nKTtcbiAgICAgIGlmICh0aGlzLm9wdHMuY29tYmluZWQpXG4gICAgICAgIGNsYXNzZXMucHVzaCgnZmxpcEluWScpO1xuICAgICAgaWYgKHRoaXMubW92aW5nKVxuICAgICAgICBjbGFzc2VzLnB1c2goJ2ZhZGVPdXQnKTtcbiAgICAgIHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRMZXZlbENsYXNzID0gKCkgPT4ge1xuICAgICAgY29uc3QgdmFsID0gdGhpcy5vcHRzLmJ2LnZhbDtcbiAgICAgIGNvbnN0IGxldmVsID0gTWF0aC5sb2codmFsKSAvIE1hdGgubG9nKDIpO1xuICAgICAgcmV0dXJuICdsZXZlbCcgKyBsZXZlbDtcbiAgICB9O1xuXG4gICAgdGhpcy5ibG9ja01hcmdpbiA9IDA7XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIHRoaXMubW92ZSA9ICgpID0+IHtcblxuICAgICAgY29uc3QgZGVsdGEgPSBzZWxmLm9wdHMuYnYuZGVsdGE7XG5cbiAgICAgIGlmIChkZWx0YSkge1xuXG4gICAgICAgIGNvbnN0IG1hcmdpbkFkanVzdFggPSBkZWx0YS5keCAqIHNlbGYuYmxvY2tNYXJnaW4sIG1hcmdpbkFkanVzdFkgPSBkZWx0YS5keSAqIHNlbGYuYmxvY2tNYXJnaW47XG5cbiAgICAgICAgc2VsZi5tb3ZpbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmIChkZWx0YS5yZW1vdmVkKVxuICAgICAgICAgIHNlbGYuYW5pbWF0ZWRVbm1vdW50KCk7XG5cbiAgICAgICAgc2VsZi51cGRhdGUoKTtcblxuICAgICAgICBWZWxvY2l0eShzZWxmLnJvb3QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxlZnQ6IChzZWxmLnJvb3Qub2Zmc2V0V2lkdGggKiBkZWx0YS5keCkgKyBtYXJnaW5BZGp1c3RYICsgJ3B4JyxcbiAgICAgICAgICAgICAgdG9wOiAoc2VsZi5yb290Lm9mZnNldEhlaWdodCAqIGRlbHRhLmR5KSArIG1hcmdpbkFkanVzdFkgKyAncHgnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICAgICAgICBjb21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYubW92aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgYWRqdXN0TWFyZ2luID0gZnVuY3Rpb24oZSkge1xuXG4gICAgICBpZiAodGhpcy5yb290ICYmIHRoaXMucm9vdC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gdGhpcy5yb290LnBhcmVudEVsZW1lbnQuY3VycmVudFN0eWxlIHx8IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMucm9vdC5wYXJlbnRFbGVtZW50KTtcblxuICAgICAgICB0aGlzLmJsb2NrTWFyZ2luID0gcGFyc2VJbnQoc3R5bGUubWFyZ2luUmlnaHQsIDEwKSAqIDI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMub24oJ3VwZGF0ZWQnLCBhZGp1c3RNYXJnaW4pO1xuXG4gICAgdGhpcy5kcmFnID0gKGRpciwgZHgsIGR5KSA9PiB7XG5cbiAgICAgIGlmICghc2VsZi5vcHRzLmJ2LnBvc3NpYmxlTW92ZXMuc29tZShtID0+IG0gPT09IGRpcikpIHJldHVybjtcblxuICAgICAgY29uc3QgdHJhbnNsYXRlID0gYHRyYW5zbGF0ZTNkKCR7ZHh9cHgsICR7ZHl9cHgsIDApYDtcbiAgICAgIHNlbGYucm9vdC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2xhdGU7XG4gICAgICBzZWxmLnJvb3Quc3R5bGUubW96VHJhbnNmb3JtID0gdHJhbnNsYXRlO1xuICAgICAgc2VsZi5yb290LnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zbGF0ZTtcblxuICAgIH07XG5cbiAgICB2ZW50Lm9uKCdtb3ZlYmxvY2tzJywgdGhpcy5tb3ZlKTtcbiAgICB2ZW50Lm9uKCdkcmFnJywgdGhpcy5kcmFnKTtcblxuICAgIHRoaXMub24oJ2JlZm9yZS11bm1vdW50JywgZnVuY3Rpb24oKSB7XG4gICAgICB2ZW50Lm9mZignbW92ZWJsb2NrcycsIHRoaXMubW92ZSk7XG4gICAgICB2ZW50Lm9mZignZHJhZycsIHRoaXMuZHJhZyk7XG4gICAgfSk7XG5cbn0pO1xuIl19
'use strict';

riot.tag2('board', '<div class="row" each="{row, y in boardRows}"> <space each="{tmp, x in row}" bv="{parent.getVal(parent.y, x)}" new="{parent.isNew(parent.y,x)}" x="{x}" y="{y}" combined="{parent.isCombined(parent.y,x)}" class="{new: parent.isNew(parent.y,x)}"></space> </div> <div class="row font-sizer"> <div class="space"><div class="block" ref="sizer_block"><label ref="sizer_block_label">2048</label></div></div> </div>', '', '', function (opts) {
  var _this = this;

  this.game = opts.game;
  this.timeout = null;
  this.fontSizes = {};

  var minFontSize = 5,
      maxFontSize = 100;

  function cloneMatrix(matrix) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        newMatrix[y][x] = matrix[y][x];
      }
    }
    return newMatrix;
  }

  function updateMoves(matrix, moves) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        var block = matrix[y][x];
        block.delta = moves[y][x];
        block.isNew = false;
        newMatrix[y][x] = block;
      }
    }
    return newMatrix;
  }

  this.on('mount', function () {
    _this.boardRows = cloneMatrix(_this.game.rows);
    window.addEventListener('resize', _this.update.bind(_this));
    window.addEventListener('orientationchange', _this.update.bind(_this));
    _this.update();
  });

  this.parent.on('newgame', function () {
    _this.boardRows = cloneMatrix(_this.game.rows);
    _this.update();
    _this.fontSizes = {};
  });

  this.parent.on('move', function (dir) {
    _this.trigger('move');
    if (dir) {

      if (_this.game.gameStatus() !== 'active') return;

      if (_this.timeout) {
        return;
      }

      _this.lastBoardRows = _this.boardRows = updateMoves(_this.boardRows, _this.game.getBlockMovements(dir));

      vent.trigger('moveblocks');

      _this.timeout = setTimeout(function () {
        if (dir) _this.game.processMove(dir);
        _this.update({ boardRows: _this.game.rows });
        _this.parent.trigger('moved');
        _this.timeout = null;
      }, 100);
    } else {
      _this.boardRows = _this.game.rows;
      _this.update();
    }
  });

  this.mixin(riotAnimate);

  this.isNew = function (y, x) {
    return this.game.rows[y][x].isNew;
  }.bind(this);

  this.isCombined = function (y, x) {
    if (!this.lastBoardRows || !this.lastBoardRows.length) return;
    return this.lastBoardRows[y][x].delta.combined;
  }.bind(this);

  this.getVal = function (y, x) {
    return this.boardRows[y][x];
  }.bind(this);

  this.on('before-update', function () {
    vent.off('*');
  });

  this.setFontSizes = function (boardDimensions) {
    var space = this.root.querySelectorAll('div:nth-child(1) > space:nth-child(1)')[0];

    if (!space) {
      return;
    }

    this.fontSizes[boardDimensions] = {};

    var testGoal = this.game.opts.goal,
        test = 2,
        label = this.refs.sizer_block_label,
        block = this.refs.sizer_block;
    var y = maxFontSize,
        compressor = .2;

    block.style.width = space.clientWidth + 'px';
    block.style.height = space.clientHeight + 'px';

    var el = block;

    var initialComputed = Math.max(Math.min(el.clientWidth / (compressor * 10), Math.min(el.clientHeight, maxFontSize)), minFontSize) + 'px';

    while (test <= testGoal) {
      el.style.fontSize = initialComputed;
      label.innerHTML = test;
      if (el.offsetHeight < el.scrollHeight || el.offsetWidth < el.scrollWidth) {
        while ((el.offsetHeight < el.scrollHeight || el.offsetWidth < el.scrollWidth) && y > minFontSize) {
          el.style.fontSize = y + 'px';
          y--;
        }
      }

      this.fontSizes[boardDimensions]["" + test] = el.style.fontSize;

      test *= 2;
    }
  }.bind(this);

  this.on('update', function () {
    var boardDimensions = this.root.clientHeight + 'x' + this.root.clientWidth;

    if (!this.fontSizes[boardDimensions] && this.isMounted) {
      this.setFontSizes(boardDimensions);
    }
  });

  this.getFontSize = function (value) {
    var boardDimensions = this.root.clientHeight + 'x' + this.root.clientWidth;

    if (!this.fontSizes[boardDimensions] && this.isMounted) {
      this.setFontSizes(boardDimensions);
    }

    if (!this.fontSizes[boardDimensions]) {

      var space = this.root.querySelectorAll('div:nth-child(1) > space:nth-child(1)')[0];

      if (!space) {
        var compressor = .2,
            length = this.boardRows.length,
            spaceMargin = 10;
        var sliceWidth = this.root.clientWidth / length - 2 * spaceMargin,
            sliceHeight = this.root.clientHeight / length - 2 * spaceMargin;

        return Math.max(Math.min(sliceWidth / (compressor * 10), Math.min(sliceHeight, maxFontSize)), minFontSize) + 'px';;
      }
    }

    return this.fontSizes[boardDimensions][value];
  }.bind(this);
});
//# sourceMappingURL=data:application/json;base64,
'use strict';

riot.tag2('score', '<div> <div class="label">Score</div> <div class="value">{parent.gameScore}</div> </div>', '.label { color: #fff; font-size: .8em; }', '', function (opts) {});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjb3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsS0FBSyxJQUFMLENBQVUsT0FBVixFQUFtQix5RkFBbkIsRUFBOEcsMENBQTlHLEVBQTBKLEVBQTFKLEVBQThKLFVBQVMsSUFBVCxFQUFlLENBQzVLLENBREQiLCJmaWxlIjoic2NvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyaW90LnRhZzIoJ3Njb3JlJywgJzxkaXY+IDxkaXYgY2xhc3M9XCJsYWJlbFwiPlNjb3JlPC9kaXY+IDxkaXYgY2xhc3M9XCJ2YWx1ZVwiPntwYXJlbnQuZ2FtZVNjb3JlfTwvZGl2PiA8L2Rpdj4nLCAnLmxhYmVsIHsgY29sb3I6ICNmZmY7IGZvbnQtc2l6ZTogLjhlbTsgfScsICcnLCBmdW5jdGlvbihvcHRzKSB7XG59KTtcbiJdfQ==
'use strict';

riot.tag2('size', '<div each="{val, i in sizes}" onclick="{setSize}"> {val} <span if="{val === parent.boardSize}">&#10004;</span> </div>', 'size div { cursor: pointer; padding: 4px; }', '', function (opts) {

    this.sizes = [2, 3, 4, 5, 6, 7, 8, 9, 10];

    this.setSize = function (e) {
        this.parent.setBoardSize(e.item.val);
    }.bind(this);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpemUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxLQUFLLElBQUwsQ0FBVSxNQUFWLEVBQWtCLHVIQUFsQixFQUEySSw2Q0FBM0ksRUFBMEwsRUFBMUwsRUFBOEwsVUFBUyxJQUFULEVBQWU7O0FBRXpNLFNBQUssS0FBTCxHQUFhLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsRUFBekIsQ0FBYjs7QUFFQSxTQUFLLE9BQUwsR0FBZSxVQUFTLENBQVQsRUFBWTtBQUN6QixhQUFLLE1BQUwsQ0FBWSxZQUFaLENBQXlCLEVBQUUsSUFBRixDQUFPLEdBQWhDO0FBQ0QsS0FGYyxDQUViLElBRmEsQ0FFUixJQUZRLENBQWY7QUFJSCxDQVJEIiwiZmlsZSI6InNpemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyaW90LnRhZzIoJ3NpemUnLCAnPGRpdiBlYWNoPVwie3ZhbCwgaSBpbiBzaXplc31cIiBvbmNsaWNrPVwie3NldFNpemV9XCI+IHt2YWx9IDxzcGFuIGlmPVwie3ZhbCA9PT0gcGFyZW50LmJvYXJkU2l6ZX1cIj4mIzEwMDA0Ozwvc3Bhbj4gPC9kaXY+JywgJ3NpemUgZGl2IHsgY3Vyc29yOiBwb2ludGVyOyBwYWRkaW5nOiA0cHg7IH0nLCAnJywgZnVuY3Rpb24ob3B0cykge1xuXG4gICAgdGhpcy5zaXplcyA9IFsyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF07XG5cbiAgICB0aGlzLnNldFNpemUgPSBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLnBhcmVudC5zZXRCb2FyZFNpemUoZS5pdGVtLnZhbCk7XG4gICAgfS5iaW5kKHRoaXMpXG5cbn0pO1xuIl19
'use strict';

riot.tag2('space', '<block if="{opts.bv.val != 0}" bv="{opts.bv}" new="{opts.new}" combined="{opts.combined}" fontsize="{getFontSize()}"> </block>', '', '', function (opts) {
  var _this = this;

  this.mixin(riotAnimate);

  this.isMoving = function (y, x) {
    return this.parent.boardRows[y][x].delta.dx || this.parent.boardRows[y][x].delta.dy;
  }.bind(this);

  this.getFontSize = function () {
    return this.parent.getFontSize('' + opts.bv.val);
  }.bind(this);

  this.on('mount', function () {
    _this.block = opts.bv;
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwYWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsS0FBSyxJQUFMLENBQVUsT0FBVixFQUFtQixnSUFBbkIsRUFBcUosRUFBckosRUFBeUosRUFBekosRUFBNkosVUFBUyxJQUFULEVBQWU7QUFBQTs7QUFFeEssT0FBSyxLQUFMLENBQVcsV0FBWDs7QUFFQSxPQUFLLFFBQUwsR0FBZ0IsVUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFjO0FBQzVCLFdBQU8sS0FBSyxNQUFMLENBQVksU0FBWixDQUFzQixDQUF0QixFQUF5QixDQUF6QixFQUE0QixLQUE1QixDQUFrQyxFQUFsQyxJQUF3QyxLQUFLLE1BQUwsQ0FBWSxTQUFaLENBQXNCLENBQXRCLEVBQXlCLENBQXpCLEVBQTRCLEtBQTVCLENBQWtDLEVBQWpGO0FBQ0QsR0FGZSxDQUVkLElBRmMsQ0FFVCxJQUZTLENBQWhCOztBQUlBLE9BQUssV0FBTCxHQUFtQixZQUFXO0FBQzVCLFdBQU8sS0FBSyxNQUFMLENBQVksV0FBWixDQUF3QixLQUFLLEtBQUssRUFBTCxDQUFRLEdBQXJDLENBQVA7QUFDRCxHQUZrQixDQUVqQixJQUZpQixDQUVaLElBRlksQ0FBbkI7O0FBSUEsT0FBSyxFQUFMLENBQVEsT0FBUixFQUFpQixZQUFNO0FBQ3JCLFVBQUssS0FBTCxHQUFhLEtBQUssRUFBbEI7QUFDRCxHQUZEO0FBSUgsQ0FoQkQiLCJmaWxlIjoic3BhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyaW90LnRhZzIoJ3NwYWNlJywgJzxibG9jayBpZj1cIntvcHRzLmJ2LnZhbCAhPSAwfVwiIGJ2PVwie29wdHMuYnZ9XCIgbmV3PVwie29wdHMubmV3fVwiIGNvbWJpbmVkPVwie29wdHMuY29tYmluZWR9XCIgZm9udHNpemU9XCJ7Z2V0Rm9udFNpemUoKX1cIj4gPC9ibG9jaz4nLCAnJywgJycsIGZ1bmN0aW9uKG9wdHMpIHtcblxuICAgIHRoaXMubWl4aW4ocmlvdEFuaW1hdGUpO1xuXG4gICAgdGhpcy5pc01vdmluZyA9IGZ1bmN0aW9uKHkseCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmJvYXJkUm93c1t5XVt4XS5kZWx0YS5keCB8fCB0aGlzLnBhcmVudC5ib2FyZFJvd3NbeV1beF0uZGVsdGEuZHk7XG4gICAgfS5iaW5kKHRoaXMpXG5cbiAgICB0aGlzLmdldEZvbnRTaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0Rm9udFNpemUoJycgKyBvcHRzLmJ2LnZhbCk7XG4gICAgfS5iaW5kKHRoaXMpXG5cbiAgICB0aGlzLm9uKCdtb3VudCcsICgpID0+IHtcbiAgICAgIHRoaXMuYmxvY2sgPSBvcHRzLmJ2O1xuICAgIH0pO1xuXG59KTtcbiJdfQ==
'use strict';

riot.tag2('winlose', '<div animate="zoomIn" animate-leave="zoomOut" animate-duration="300ms"> {getStatus()} </div>', '', '', function (opts) {
  var _this = this;

  this.mixin(riotAnimate);

  var prevMsg = '';

  this.root.addEventListener("transitionend", function () {
    if (opts.gamestatus.toLowerCase() === 'active') {
      _this.root.style.zIndex = 0;
    }
  }, false);

  this.getStatus = function () {
    var verb = '';
    switch (opts.gamestatus) {
      case 'win':
        verb = 'won';break;
      case 'loss':
        verb = 'lose';break;
      default:
        verb = '?';break;
    }
    var newMsg = 'YOU ' + verb.toUpperCase() + '!';
    if (opts.gamestatus && opts.gamestatus.toLowerCase() !== 'active') {
      prevMsg = newMsg;
      this.root.style.zIndex = 500;
      return newMsg;
    } else {
      return prevMsg;
    }
  }.bind(this);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpbmxvc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxLQUFLLElBQUwsQ0FBVSxTQUFWLEVBQXFCLDhGQUFyQixFQUFxSCxFQUFySCxFQUF5SCxFQUF6SCxFQUE2SCxVQUFTLElBQVQsRUFBZTtBQUFBOztBQUN4SSxPQUFLLEtBQUwsQ0FBVyxXQUFYOztBQUVBLE1BQUksVUFBVSxFQUFkOztBQUVBLE9BQUssSUFBTCxDQUFVLGdCQUFWLENBQTJCLGVBQTNCLEVBQTRDLFlBQU07QUFDaEQsUUFBSSxLQUFLLFVBQUwsQ0FBZ0IsV0FBaEIsT0FBa0MsUUFBdEMsRUFBZ0Q7QUFDOUMsWUFBSyxJQUFMLENBQVUsS0FBVixDQUFnQixNQUFoQixHQUF5QixDQUF6QjtBQUNEO0FBQ0YsR0FKRCxFQUlHLEtBSkg7O0FBTUEsT0FBSyxTQUFMLEdBQWlCLFlBQVc7QUFDMUIsUUFBSSxPQUFPLEVBQVg7QUFDQSxZQUFRLEtBQUssVUFBYjtBQUNFLFdBQUssS0FBTDtBQUFZLGVBQU8sS0FBUCxDQUFjO0FBQzFCLFdBQUssTUFBTDtBQUFhLGVBQU8sTUFBUCxDQUFlO0FBQzVCO0FBQVMsZUFBTyxHQUFQLENBQVk7QUFIdkI7QUFLQSxRQUFNLFNBQVMsU0FBUyxLQUFLLFdBQUwsRUFBVCxHQUE4QixHQUE3QztBQUNBLFFBQUksS0FBSyxVQUFMLElBQW1CLEtBQUssVUFBTCxDQUFnQixXQUFoQixPQUFrQyxRQUF6RCxFQUFtRTtBQUNqRSxnQkFBVSxNQUFWO0FBQ0EsV0FBSyxJQUFMLENBQVUsS0FBVixDQUFnQixNQUFoQixHQUF5QixHQUF6QjtBQUNBLGFBQU8sTUFBUDtBQUNELEtBSkQsTUFJTztBQUNMLGFBQU8sT0FBUDtBQUNEO0FBQ0YsR0FmZ0IsQ0FlZixJQWZlLENBZVYsSUFmVSxDQUFqQjtBQWlCSCxDQTVCRCIsImZpbGUiOiJ3aW5sb3NlLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmlvdC50YWcyKCd3aW5sb3NlJywgJzxkaXYgYW5pbWF0ZT1cInpvb21JblwiIGFuaW1hdGUtbGVhdmU9XCJ6b29tT3V0XCIgYW5pbWF0ZS1kdXJhdGlvbj1cIjMwMG1zXCI+IHtnZXRTdGF0dXMoKX0gPC9kaXY+JywgJycsICcnLCBmdW5jdGlvbihvcHRzKSB7XG4gICAgdGhpcy5taXhpbihyaW90QW5pbWF0ZSk7XG5cbiAgICBsZXQgcHJldk1zZyA9ICcnO1xuXG4gICAgdGhpcy5yb290LmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsICgpID0+IHtcbiAgICAgIGlmIChvcHRzLmdhbWVzdGF0dXMudG9Mb3dlckNhc2UoKSA9PT0gJ2FjdGl2ZScpIHtcbiAgICAgICAgdGhpcy5yb290LnN0eWxlLnpJbmRleCA9IDA7XG4gICAgICB9XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgdGhpcy5nZXRTdGF0dXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB2ZXJiID0gJyc7XG4gICAgICBzd2l0Y2ggKG9wdHMuZ2FtZXN0YXR1cykge1xuICAgICAgICBjYXNlICd3aW4nOiB2ZXJiID0gJ3dvbic7IGJyZWFrO1xuICAgICAgICBjYXNlICdsb3NzJzogdmVyYiA9ICdsb3NlJzsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZlcmIgPSAnPyc7IGJyZWFrO1xuICAgICAgfVxuICAgICAgY29uc3QgbmV3TXNnID0gJ1lPVSAnICsgdmVyYi50b1VwcGVyQ2FzZSgpICsgJyEnO1xuICAgICAgaWYgKG9wdHMuZ2FtZXN0YXR1cyAmJiBvcHRzLmdhbWVzdGF0dXMudG9Mb3dlckNhc2UoKSAhPT0gJ2FjdGl2ZScpIHtcbiAgICAgICAgcHJldk1zZyA9IG5ld01zZztcbiAgICAgICAgdGhpcy5yb290LnN0eWxlLnpJbmRleCA9IDUwMDtcbiAgICAgICAgcmV0dXJuIG5ld01zZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwcmV2TXNnO1xuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKVxuXG59KTsiXX0=
//# sourceMappingURL=2048.js.map

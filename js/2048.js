'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

if (typeof Object.assign != 'function') {
  Object.assign = function (target) {
    'use strict';

    if (target == null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }

    target = Object(target);
    for (var index = 1; index < arguments.length; index++) {
      var source = arguments[index];
      if (source != null) {
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
    }
    return target;
  };
}

function Game(_opts) {
  var _this = this;

  var DEFAULT_SIZE = 4;
  var DEFAULT_GOAL = 2048;
  var DEFAULT_NEW_BLOCK_COUNT = 1;
  var NEW_BLOCK_VAL_HIGH = 4;
  var NEW_BLOCK_VAL_LOW = 2;
  var HIGH_LOW_RATIO = .75;
  var HIGH_BLOCK_PERMITTED = 1 / 256;

  var opts = Object.assign({
    size: DEFAULT_SIZE,
    goal: DEFAULT_GOAL,
    newBlockCount: DEFAULT_NEW_BLOCK_COUNT

  }, _opts);

  this.boardUndoStack = [];
  this.boardRedoStack = [];
  this.score = 0;

  this.getStartBlocks = function (blocks, boardSize) {
    var loc = [Math.floor(boardSize * Math.random()), Math.floor(boardSize * Math.random())];
    if (!blocks.some(function (b) {
      return b[0] == loc[0] && b[1] == loc[1];
    })) {
      blocks.push(loc);
      return blocks;
    } else {
      return _this.getStartBlocks(blocks, boardSize);
    }
  };

  this.gameStatus = function () {
    return _this.status;
  };

  this.getNewBlocks = function (matrix, count, newBlocks) {
    if (0 == count--) return newBlocks;
    var boardSize = matrix.length,
        available = [];
    var newMatrix = cloneMatrix(matrix);
    for (var i = 0; i < boardSize; i++) {
      for (var j = 0; j < boardSize; j++) {
        if (!matrix[i][j].val) available.push({ y: i, x: j });
      }
    }

    if (!available.length) return newBlocks;

    var c = available[Math.floor(available.length * Math.random())];
    newBlocks.push(c);
    newMatrix[c.y][c.x].val = 2;
    return _this.getNewBlocks(newMatrix, count, newBlocks);
  };

  this.maybeGetBlock = function (blocks, x, y) {
    var val = blocks.some(function (b) {
      return b[0] == x && b[1] == y;
    }) ? 2 : 0;
    return { val: val, combined: false, startY: y, startX: x, moved: 0 };
  };

  this.newGame = function (newOpts) {
    _this.status = 'active';
    opts = Object.assign({}, opts, newOpts);
    _this.boardSize = opts.size;
    _this.maxBlockValue = 2;

    var gameBlocks = _this.getStartBlocks([], _this.boardSize);
    gameBlocks = _this.getStartBlocks(gameBlocks, _this.boardSize);

    _this.rows = [];
    for (var i = 0; i < _this.boardSize; i++) {
      var row = [];
      for (var j = 0; j < _this.boardSize; j++) {
        row.push(_this.maybeGetBlock(gameBlocks, i, j));
      }
      _this.rows.push(row);
    }
    _this.rows = _this.updateProps(_this.rows);
  };

  this.combineValuesUp = function (matrix, secondPass) {
    var size = matrix.length,
        combined = cloneMatrix(matrix);

    for (var x = 0; x < size; x++) {
      var size_r = size;
      for (var y = 0; y < size_r - 1; y++) {
        var curBlock = combined[y][x],
            nextBlock = combined[y + 1][x];

        if (curBlock.val === 0) {
          var y1 = void 0;
          for (y1 = y; y1 < size_r - 1; y1++) {
            combined[y1][x] = Object.assign({}, combined[y1 + 1][x]);
          }
          combined[y1][x].val = 0;
          y--;size_r--;
        } else {
          if (curBlock.val === nextBlock.val && !curBlock.combined && !nextBlock.combined) {
            var _y = void 0;
            var newValue = curBlock.val * 2;
            //this.score += newValue;

            combined[y][x] = Object.assign({}, nextBlock, { combined: { y: curBlock.startY, x: curBlock.startX }, val: newValue });
            nextBlock.val = 0;
            for (_y = y + 1; _y < size_r - 1; _y++) {
              combined[_y][x] = Object.assign({}, combined[_y + 1][x]);
            }
            combined[_y][x].val = 0;
            y--;size_r--;
          }
        }
      }
    }

    if (!secondPass) {
      return _this.combineValuesUp(combined, true);
    }
    return combined;
  };

  this.getBlockMovements = function (direction) {
    var size = _this.rows.length,
        blocks = [];

    var preview = _this.moveBlocks(direction);

    for (var y = 0; y < size; y++) {
      blocks.push(new Array(size));
      for (var x = 0; x < size; x++) {
        blocks[y][x] = 0;
      }
    }
    for (var _y2 = 0; _y2 < size; _y2++) {
      for (var _x = 0; _x < size; _x++) {
        //  let block = this.rows[y][x];
        var newBlock = preview[_y2][_x];

        var dx = 0,
            dy = 0;

        switch (direction) {
          case 'up':
          case 'down':
            dy = _y2 - newBlock.startY;break;
          case 'left':
          case 'right':
            dx = _x - newBlock.startX;break;
        }
        //console.log(y,x,dy,dx,n,block,newBlock)

        if ((dy || dx) && newBlock.val) blocks[newBlock.startY][newBlock.startX] = { dy: dy, dx: dx };

        if (newBlock.combined) {
          var _dx = 0,
              _dy = 0;
          switch (direction) {
            case 'up':
            case 'down':
              _dy = _y2 - newBlock.combined.y;break;
            case 'left':
            case 'right':
              _dx = _x - newBlock.combined.x;break;
          }
          //console.log(y,x,dy,dx,newBlock.combined)

          if ((_dy || _dx) && newBlock.val) blocks[newBlock.combined.y][newBlock.combined.x] = { dy: _dy, dx: _dx, removed: true };
          blocks[_y2][_x] = Object.assign({ combined: true }, blocks[_y2][_x]);
        }
      }
    }

    return blocks;
  };

  this.possibleMoves = function (matrix, y, x) {
    var size = _this.rows.length,
        moves = [];
    var nbs = [[-1, 0, 'up'], [0, -1, 'left'], [0, 1, 'right'], [1, 0, 'down']];
    for (var j = 0; j < nbs.length; j++) {
      var y1 = y + nbs[j][0],
          x1 = x + nbs[j][1];
      if (x1 >= 0 && y1 >= 0 && x1 < size && y1 < size) {
        if (matrix[y][x].val && (matrix[y1][x1].val == matrix[y][x].val || !matrix[y1][x1].val)) moves.push(nbs[j][2]);
      }
    }
    return moves;
  };

  this.getNewBlockValue = function (notRandom) {
    return _this.maxBlockValue >= opts.goal * HIGH_BLOCK_PERMITTED && (notRandom || Math.random() > HIGH_LOW_RATIO) ? NEW_BLOCK_VAL_HIGH : NEW_BLOCK_VAL_LOW;
  };

  this.processMove = function (direction) {

    var size = _this.rows.length,
        moves = [];

    if (_this.status !== 'active') return;

    for (var y = 0; y < size; y++) {
      for (var x = 0; x < size; x++) {
        if (_this.rows[y][x].possibleMoves.length) moves.push(_this.rows[y][x].possibleMoves);
      }
    }

    if (!moves.some(function (b) {
      return b.some(function (m) {
        return m === direction;
      });
    })) return;

    _this.boardUndoStack.push(_this.rows);
    _this.boardRedoStack = [];

    _this.rows = _this.moveBlocks(direction);

    if (_this.checkWin()) return;

    _this.newBlocks = _this.getNewBlocks(_this.rows, opts.newBlockCount, []);
    var newVal = _this.getNewBlockValue();
    _this.newBlocks.forEach(function (c) {
      Object.assign(_this.rows[c.y][c.x], getDefaults(c.y, c.x, newVal, null), { isNew: true });
    });

    _this.score += _this.getMoveScore(_this.rows);

    _this.rows = _this.updateProps(_this.rows);

    _this.checkLoss();
  };

  this.checkWin = function () {
    var size = _this.rows.length;
    for (var y = 0; y < size; y++) {
      for (var x = 0; x < size; x++) {
        if (_this.rows[y][x].val >= _this.maxBlockValue) {
          _this.maxBlockValue = _this.rows[y][x].val;
        }
      }
    }

    if (_this.maxBlockValue >= opts.goal) {
      _this.status = 'win';
      return true;
    }

    return false;
  };

  this.checkLoss = function () {
    var size = _this.rows.length,
        moves = [];
    for (var y = 0; y < size; y++) {
      for (var x = 0; x < size; x++) {
        moves.push(_this.rows[y][x].possibleMoves);
      }
    }
    if (!moves.some(function (b) {
      return b.length != 0;
    })) {
      _this.status = 'loss';return true;
    }

    return false;
  };

  this.moveBlocks = function (direction) {
    return _this.transformMatrix(direction, _this.combineValuesUp);
  };

  this.undo = function () {
    if (_this.boardUndoStack.length) {
      _this.status = 'active';
      var redo = _this.rows;
      _this.rows = _this.boardUndoStack.pop();
      _this.boardRedoStack.push(redo);
    }
  };

  this.redo = function () {
    if (_this.boardRedoStack.length) {
      var undo = _this.rows;
      _this.rows = _this.boardRedoStack.pop();
      _this.boardUndoStack.push(undo);
      _this.checkWin();
      _this.checkLoss();
    }
  };

  // matrix helpers

  this.transpose = function (matrix) {
    var size = matrix.length,
        trans = new Array(size);
    for (var y = 0; y < size; y++) {
      trans[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        trans[y][x] = Object.assign({}, matrix[x][y]);
      }
    }
    return trans;
  };

  this.reverseEachRow = function (matrix) {

    var size = matrix.length,
        reversed = new Array(size);
    for (var y = 0; y < size; y++) {
      reversed[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        reversed[y][x] = Object.assign({}, matrix[y][size - x - 1]);
      }
    }
    return reversed;
  };

  this.reverseEachColumn = function (matrix) {

    var size = matrix.length,
        reversed = new Array(size);
    for (var y = 0; y < size; y++) {
      reversed[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        reversed[y][x] = Object.assign({}, matrix[size - y - 1][x]);
      }
      //reversed[y] = Object.assign({}, matrix[size - y - 1]);
    }
    return reversed;
  };

  this.printMatrix = function (matrix) {
    var size = matrix.length;
    console.log('----');
    for (var y = 0; y < size; y++) {
      var row = '';
      for (var x = 0; x < size; x++) {
        row += matrix[y][x].val + ' ';
      }
      console.log(row);
    }
    console.log('----');
  };

  this.rotate = function (direction, matrix) {
    switch (direction) {
      case 'left':
        return _this.reverseEachColumn(_this.transpose(matrix));
      case 'right':
        return _this.reverseEachRow(_this.transpose(matrix));
      default:
        break;
    }
    return matrix;
  };

  this.flip = function (matrix) {
    return _this.reverseEachRow(_this.reverseEachColumn(cloneMatrix(matrix)));
  };

  this.transformMatrix = function (direction, combineFn) {
    switch (direction) {
      case 'left':
        return _this.rotate('left', combineFn.call(_this, _this.rotate('right', _this.rows)));
        break;
      case 'right':
        return _this.rotate('right', combineFn.call(_this, _this.rotate('left', _this.rows)));
        break;
      case 'up':
        return combineFn.call(_this, _this.rows);
        break;
      case 'down':
        return _this.flip(combineFn.call(_this, _this.flip(_this.rows)));
        break;
      default:
        return;break;
    }
  };

  this.addProps = function (matrix) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        newMatrix[y][x] = getDefaults(y, x, matrix[y][x], []);
      }
    }
    return _this.updateProps(newMatrix);
  };

  this.removeProps = function (matrix) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = Array(size);
      for (var x = 0; x < size; x++) {
        newMatrix[y][x] = matrix[y][x].val;
      }
    }
    return newMatrix;
  };

  this.updateProps = function (matrix) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        newMatrix[y][x] = getDefaults(y, x, matrix[y][x].val, _this.possibleMoves(matrix, y, x));
      }
    }
    return newMatrix;
  };

  this.getMoveScore = function (matrix) {
    var moveScore = 0;
    var size = matrix.length;
    for (var y = 0; y < size; y++) {
      for (var x = 0; x < size; x++) {
        if (matrix[y][x].combined) {
          moveScore += matrix[y][x].val;
        }
      }
    }
    return moveScore;
  };

  function getDefaults(y, x, val, moves) {
    return {
      val: val,
      combined: false,
      startY: y,
      startX: x,
      moved: 0,
      possibleMoves: moves,
      isNew: false
    };
  }
  function cloneMatrix(matrix) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = Array(size);
      for (var x = 0; x < size; x++) {
        if (_typeof(matrix[y][x]) == 'object') newMatrix[y][x] = Object.assign({}, matrix[y][x]);
        //else
        //newMatrix[y][x] = matrix[y][x];
      }
    }
    return newMatrix;
  }
}
//# sourceMappingURL=data:application/json;base64,
'use strict';

riot.tag2('app', '<header> <div class="controls"> <button type="button" name="button" id="newGame" onclick="{newGame}">New Game</button> <div class="sizeWrapper"> <button type="button" name="button" id="setSize" onclick="{showSizeDropdown}">Size: {boardSize} &#9660; </button> <size if="{settingSize()}"></size> </div> <div class="undoWrapper"> <button id="undo" onclick="{undoClick}">Undo</button> <button id="redo" onclick="{redoClick}">Redo</button> </div> </div> <score></score> </header> <winlose if="{gameStatus == \'win\'}">YOU WIN</winlose> <winlose if="{gameStatus == \'loss\'}">YOU LOSE</winlose> <board name="board" game="{game}"></board> <div class="status"> Game status: <input onkeydown="{handleKeyDown}" onkeypress="{handleKeyPress}" onclick="{updateGame}" id="input" name="test" value="{gameStatus}" readonly> </div>', '', 'onclick="{setFocus}"', function (opts) {
  var _this = this;

  var DRAG_ENABLED = false;

  this.boardSize = 4;

  this.game = new Game({
    size: this.boardSize
  });

  this.game.newGame();

  this.gameScore = 0;

  this.settingBoardSize = false;

  this.isTouchEnabled = "ontouchstart" in document.documentElement;

  this.on('mount', function () {

    setTimeout(_this.setFocus, 300);

    document.documentElement.className += _this.isTouchEnabled ? ' touch' : ' no-touch';

    var mc = new Hammer.Manager(_this.board);

    var swipe = new Hammer.Swipe({
      threshold: 20
    });

    if (DRAG_ENABLED) {
      var pan = new Hammer.Pan({
        threshold: 5
      });
      pan.recognizeWith(swipe);
      mc.add(pan);
      mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });

      mc.on("pan", function (ev) {
        var dir = void 0,
            axis = void 0;

        switch (ev.direction) {
          case Hammer.DIRECTION_LEFT:
            dir = 'left';axis = 'x';break;
          case Hammer.DIRECTION_RIGHT:
            dir = 'right';axis = 'x';break;
          case Hammer.DIRECTION_UP:
            dir = 'up';axis = 'y';break;
          case Hammer.DIRECTION_DOWN:
            dir = 'down';axis = 'y';break;
        }

        vent.trigger('drag', dir, axis === 'x' ? ev.deltaX : 0, axis === 'y' ? ev.deltaY : 0);
      });

      mc.on("panstart1", function (ev) {
        var START_X = 0,
            START_Y = 0;
        var dir = void 0;

        switch (ev.direction) {
          case Hammer.DIRECTION_LEFT:
            dir = 'left';break;
          case Hammer.DIRECTION_RIGHT:
            dir = 'right';break;
          case Hammer.DIRECTION_UP:
            dir = 'up';break;
          case Hammer.DIRECTION_DOWN:
            dir = 'down';break;
        }
      });
    }

    mc.add(swipe);

    mc.on('swipe', function (e) {
      var dir = void 0;
      switch (e.direction) {
        case Hammer.DIRECTION_LEFT:
          dir = 'left';break;
        case Hammer.DIRECTION_RIGHT:
          dir = 'right';break;
        case Hammer.DIRECTION_UP:
          dir = 'up';break;
        case Hammer.DIRECTION_DOWN:
          dir = 'down';break;
      }
      _this.sendMove(dir);
    });
  });

  this.handleKeyDown = function (e) {

    e.preventUpdate = true;
    var keys = {
      37: 'left',
      38: 'up',
      39: 'right',
      40: 'down'
    };
    this.sendMove(keys[e.keyCode]);
  }.bind(this);

  this.sendMove = function (dir) {
    if (!dir) return true;
    this.lastMoveDirection = dir;
    this.trigger('move', dir);
  }.bind(this);

  this.newGame = function (e) {
    this.game.newGame({
      size: this.boardSize
    });
    this.trigger('newgame');
    this.gameStatus = 'active';
    this.gameScore = 0;
    this.updateGame();
  }.bind(this);

  this.setFocus = function (e) {
    if (this.isTouchEnabled) return;

    this.input.focus();
    if (e) e.preventUpdate = true;
  }.bind(this);

  this.updateGame = function (e) {
    this.update();
  }.bind(this);

  this.undoClick = function () {
    this.game.undo();
    this.trigger('move moved');
  }.bind(this);

  this.redoClick = function () {
    this.game.redo();
    this.trigger('move moved');
  }.bind(this);

  this.on('moved', function () {
    _this.gameStatus = _this.game.gameStatus();
    _this.gameScore = _this.game.score;
    _this.update();
  });

  this.handleKeyPress = function (e) {
    if (!(e.ctrlKey || e.metaKey || e.altKey)) {
      e.stopPropagation();
      e.preventDefault();
    }
  }.bind(this);

  this.getMovingClass = function () {
    return "moving-" + this.lastMoveDirection;
  }.bind(this);

  this.settingSize = function () {
    return this.settingBoardSize;
  }.bind(this);

  this.setBoardSize = function (val) {
    this.settingBoardSize = false;
    this.boardSize = val;
    this.update();
  }.bind(this);

  this.showSizeDropdown = function () {
    this.settingBoardSize = !this.settingBoardSize;
  }.bind(this);
});
//# sourceMappingURL=data:application/json;base64,
'use strict';

riot.tag2('block', '<label animate="{this.getAnimations()}" animate-leave="zoomOut" animate-duration="300ms">{opts.bv.val}</label>', '', 'class="{this.getLevelClass()}"', function (opts) {
  var _this = this;

  this.mixin(riotAnimate);

  this.getAnimations = function () {
    var classes = [];
    if (_this.opts.new) classes.push('bounceIn');
    if (_this.opts.combined) classes.push('flipInY');
    if (_this.moving) classes.push('fadeOut');
    return classes.join(' ');
  };

  this.getLevelClass = function () {
    var val = _this.opts.bv.val;
    var level = Math.log(val) / Math.log(2);
    return 'level' + level;
  };

  this.blockMargin = 0;

  var self = this;

  this.move = function () {

    var delta = self.opts.bv.delta;
    if (delta) {

      var marginAdjustX = delta.dx * self.blockMargin,
          marginAdjustY = delta.dy * self.blockMargin;

      self.moving = true;

      if (delta.removed) self.animatedUnmount();

      self.update();

      Velocity(self.root, {
        left: self.root.offsetWidth * delta.dx + marginAdjustX + 'px',
        top: self.root.offsetHeight * delta.dy + marginAdjustY + 'px'
      }, {
        duration: 100,
        complete: function complete() {
          self.moving = false;
        }
      });
    }
  };

  this.drag = function (dir, dx, dy) {

    if (!self.opts.bv.possibleMoves.some(function (m) {
      return m == dir;
    })) return;

    var translate = 'translate3d(' + dx + 'px, ' + dy + 'px, 0)';
    self.root.style.transform = translate;
    self.root.style.mozTransform = translate;
    self.root.style.webkitTransform = translate;
  };

  vent.on('moveblocks', this.move);
  vent.on('drag', this.drag);

  this.on('mount', function () {});
  this.on('before-unmount', function () {
    vent.off('moveblocks', this.move);
    vent.off('drag', this.drag);
  });

  this.on('updated', function () {

    var minFontSize = 5,
        maxFontSize = 100,
        compressor = .2,
        el = this.root;

    el.style.fontSize = Math.max(Math.min(el.clientWidth / (compressor * 10), Math.min(el.clientHeight, maxFontSize)), minFontSize) + 'px';

    if (this.root && this.root.parentElement) {
      var style = this.root.parentElement.currentStyle || window.getComputedStyle(this.root.parentElement);

      this.blockMargin = parseInt(style.marginRight, 10) * 2;
    }
  });
  this.on('mount', function () {});
});
//# sourceMappingURL=data:application/json;base64,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OztBQUtBLE9BQUssRUFBTCxDQUFRLFNBQVIsRUFBbUIsWUFBVzs7QUFFNUIsUUFBSSxjQUFjLENBQWxCO0FBQUEsUUFBcUIsY0FBYyxHQUFuQztBQUFBLFFBQXdDLGFBQWEsRUFBckQ7QUFBQSxRQUF5RCxLQUFLLEtBQUssSUFBbkU7O0FBRUEsT0FBRyxLQUFILENBQVMsUUFBVCxHQUFvQixLQUFLLEdBQUwsQ0FBUyxLQUFLLEdBQUwsQ0FBUyxHQUFHLFdBQUgsSUFBa0IsYUFBVyxFQUE3QixDQUFULEVBQTJDLEtBQUssR0FBTCxDQUFTLEdBQUcsWUFBWixFQUEwQixXQUExQixDQUEzQyxDQUFULEVBQTZGLFdBQTdGLElBQTRHLElBQWhJOztBQUVBLFFBQUksS0FBSyxJQUFMLElBQWEsS0FBSyxJQUFMLENBQVUsYUFBM0IsRUFBMEM7QUFDeEMsVUFBTSxRQUFRLEtBQUssSUFBTCxDQUFVLGFBQVYsQ0FBd0IsWUFBeEIsSUFBd0MsT0FBTyxnQkFBUCxDQUF3QixLQUFLLElBQUwsQ0FBVSxhQUFsQyxDQUF0RDs7QUFFQSxXQUFLLFdBQUwsR0FBbUIsU0FBUyxNQUFNLFdBQWYsRUFBNEIsRUFBNUIsSUFBa0MsQ0FBckQ7QUFDRDtBQUVGLEdBWkQ7QUFhQSxPQUFLLEVBQUwsQ0FBUSxPQUFSLEVBQWlCLFlBQVcsQ0FFM0IsQ0FGRDtBQUdILENBNUZEIiwiZmlsZSI6ImJsb2NrLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmlvdC50YWcyKCdibG9jaycsICc8bGFiZWwgYW5pbWF0ZT1cInt0aGlzLmdldEFuaW1hdGlvbnMoKX1cIiBhbmltYXRlLWxlYXZlPVwiem9vbU91dFwiIGFuaW1hdGUtZHVyYXRpb249XCIzMDBtc1wiPntvcHRzLmJ2LnZhbH08L2xhYmVsPicsICcnLCAnY2xhc3M9XCJ7dGhpcy5nZXRMZXZlbENsYXNzKCl9XCInLCBmdW5jdGlvbihvcHRzKSB7XG4gICAgdGhpcy5taXhpbihyaW90QW5pbWF0ZSk7XG5cbiAgICB0aGlzLmdldEFuaW1hdGlvbnMgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjbGFzc2VzID0gW107XG4gICAgICBpZiAodGhpcy5vcHRzLm5ldylcbiAgICAgICAgY2xhc3Nlcy5wdXNoKCdib3VuY2VJbicpO1xuICAgICAgaWYgKHRoaXMub3B0cy5jb21iaW5lZClcbiAgICAgICAgY2xhc3Nlcy5wdXNoKCdmbGlwSW5ZJyk7XG4gICAgICBpZiAodGhpcy5tb3ZpbmcpXG4gICAgICAgIGNsYXNzZXMucHVzaCgnZmFkZU91dCcpO1xuICAgICAgcmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuICAgIH07XG5cbiAgICB0aGlzLmdldExldmVsQ2xhc3MgPSAoKSA9PiB7XG4gICAgICBjb25zdCB2YWwgPSB0aGlzLm9wdHMuYnYudmFsO1xuICAgICAgY29uc3QgbGV2ZWwgPSBNYXRoLmxvZyh2YWwpIC8gTWF0aC5sb2coMik7XG4gICAgICByZXR1cm4gJ2xldmVsJyArIGxldmVsO1xuICAgIH07XG5cbiAgICB0aGlzLmJsb2NrTWFyZ2luID0gMDtcblxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy5tb3ZlID0gKCkgPT4ge1xuXG4gICAgICBjb25zdCBkZWx0YSA9IHNlbGYub3B0cy5idi5kZWx0YTtcbiAgICAgIGlmIChkZWx0YSkge1xuXG4gICAgICAgIGNvbnN0IG1hcmdpbkFkanVzdFggPSBkZWx0YS5keCAqIHNlbGYuYmxvY2tNYXJnaW4sIG1hcmdpbkFkanVzdFkgPSBkZWx0YS5keSAqIHNlbGYuYmxvY2tNYXJnaW47XG5cbiAgICAgICAgc2VsZi5tb3ZpbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmIChkZWx0YS5yZW1vdmVkKVxuICAgICAgICAgIHNlbGYuYW5pbWF0ZWRVbm1vdW50KCk7XG5cbiAgICAgICAgc2VsZi51cGRhdGUoKTtcblxuICAgICAgICBWZWxvY2l0eShzZWxmLnJvb3QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxlZnQ6IChzZWxmLnJvb3Qub2Zmc2V0V2lkdGggKiBkZWx0YS5keCkgKyBtYXJnaW5BZGp1c3RYICsgJ3B4JyxcbiAgICAgICAgICAgICAgdG9wOiAoc2VsZi5yb290Lm9mZnNldEhlaWdodCAqIGRlbHRhLmR5KSArIG1hcmdpbkFkanVzdFkgKyAncHgnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICAgICAgICBjb21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYubW92aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5kcmFnID0gKGRpciwgZHgsIGR5KSA9PiB7XG5cbiAgICAgIGlmICghc2VsZi5vcHRzLmJ2LnBvc3NpYmxlTW92ZXMuc29tZShtID0+IG0gPT0gZGlyKSkgcmV0dXJuO1xuXG4gICAgICBjb25zdCB0cmFuc2xhdGVcbiAgICAgICAgPSBgdHJhbnNsYXRlM2QoJHtkeH1weCwgJHtkeX1weCwgMClgO1xuICAgICAgc2VsZi5yb290LnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zbGF0ZTtcbiAgICAgIHNlbGYucm9vdC5zdHlsZS5tb3pUcmFuc2Zvcm0gPSB0cmFuc2xhdGU7XG4gICAgICBzZWxmLnJvb3Quc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdHJhbnNsYXRlO1xuXG4gICAgfTtcblxuICAgIHZlbnQub24oJ21vdmVibG9ja3MnLCB0aGlzLm1vdmUpO1xuICAgIHZlbnQub24oJ2RyYWcnLCB0aGlzLmRyYWcpO1xuXG4gICAgdGhpcy5vbignbW91bnQnLCBmdW5jdGlvbigpIHtcblxuICAgIH0pO1xuICAgIHRoaXMub24oJ2JlZm9yZS11bm1vdW50JywgZnVuY3Rpb24oKSB7XG4gICAgICB2ZW50Lm9mZignbW92ZWJsb2NrcycsIHRoaXMubW92ZSk7XG4gICAgICB2ZW50Lm9mZignZHJhZycsIHRoaXMuZHJhZyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCd1cGRhdGVkJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgIGxldCBtaW5Gb250U2l6ZSA9IDUsIG1heEZvbnRTaXplID0gMTAwLCBjb21wcmVzc29yID0gLjIsIGVsID0gdGhpcy5yb290O1xuXG4gICAgICBlbC5zdHlsZS5mb250U2l6ZSA9IE1hdGgubWF4KE1hdGgubWluKGVsLmNsaWVudFdpZHRoIC8gKGNvbXByZXNzb3IqMTApLCBNYXRoLm1pbihlbC5jbGllbnRIZWlnaHQsIG1heEZvbnRTaXplKSksIG1pbkZvbnRTaXplKSArICdweCc7XG5cbiAgICAgIGlmICh0aGlzLnJvb3QgJiYgdGhpcy5yb290LnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSB0aGlzLnJvb3QucGFyZW50RWxlbWVudC5jdXJyZW50U3R5bGUgfHwgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5yb290LnBhcmVudEVsZW1lbnQpO1xuXG4gICAgICAgIHRoaXMuYmxvY2tNYXJnaW4gPSBwYXJzZUludChzdHlsZS5tYXJnaW5SaWdodCwgMTApICogMjtcbiAgICAgIH1cblxuICAgIH0pO1xuICAgIHRoaXMub24oJ21vdW50JywgZnVuY3Rpb24oKSB7XG5cbiAgICB9KTtcbn0pO1xuIl19
'use strict';

riot.tag2('board', '<div class="row" each="{row, y in boardRows}"> <space each="{tmp, x in row}" bv="{getVal(y, x)}" new="{isNew(y,x)}" x="{x}" y="{y}" combined="{isCombined(y,x)}" class="{new: isNew(y,x)}"></space> </div>', '', '', function (opts) {
  var _this = this;

  this.game = opts.game;
  this.timeout = null;

  function cloneMatrix(matrix) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        newMatrix[y][x] = matrix[y][x];
      }
    }
    return newMatrix;
  }

  function updateMoves(matrix, moves) {
    var size = matrix.length,
        newMatrix = new Array(size);
    for (var y = 0; y < size; y++) {
      newMatrix[y] = new Array(size);
      for (var x = 0; x < size; x++) {
        var block = matrix[y][x];
        block.delta = moves[y][x];
        block.isNew = false;
        newMatrix[y][x] = block;
      }
    }
    return newMatrix;
  }

  this.on('mount', function () {
    _this.boardRows = cloneMatrix(_this.game.rows);
    window.addEventListener('resize', _this.update.bind(_this));
    window.addEventListener('orientationchange', _this.update.bind(_this));
    _this.update();
  });

  this.parent.on('newgame', function () {
    _this.boardRows = cloneMatrix(_this.game.rows);
    _this.update();
  });

  this.parent.on('move', function (dir) {
    _this.trigger('move');
    if (dir) {

      if (_this.game.gameStatus() != 'active') return;

      if (_this.timeout) {
        return;
      }

      _this.lastBoardRows = _this.boardRows = updateMoves(_this.boardRows, _this.game.getBlockMovements(dir));

      vent.trigger('moveblocks');

      _this.timeout = setTimeout(function () {
        if (dir) _this.game.processMove(dir);
        _this.boardRows = cloneMatrix(_this.game.rows);
        _this.update();
        _this.parent.trigger('moved');

        _this.timeout = null;
      }, 100);
    } else {
      _this.boardRows = _this.game.rows;
      _this.update();
    }
  });

  this.mixin(riotAnimate);

  this.isNew = function (y, x) {
    return this.game.rows[y][x].isNew;
  }.bind(this);

  this.isCombined = function (y, x) {
    return this.lastBoardRows[y][x].delta.combined;
  }.bind(this);

  this.getVal = function (y, x) {
    return this.boardRows[y][x];
  }.bind(this);

  this.on('before-update', function () {
    vent.off('*');
  });
});
//# sourceMappingURL=data:application/json;base64,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LGNBQUssU0FBTCxHQUFpQixZQUFZLE1BQUssSUFBTCxDQUFVLElBQXRCLENBQWpCO0FBQ0EsY0FBSyxNQUFMO0FBQ0YsY0FBSyxNQUFMLENBQVksT0FBWixDQUFvQixPQUFwQjs7QUFFRixjQUFLLE9BQUwsR0FBZSxJQUFmO0FBQ0MsT0FQWSxFQU9WLEdBUFUsQ0FBZjtBQVNELEtBckJELE1BcUJPO0FBQ0gsWUFBSyxTQUFMLEdBQWlCLE1BQUssSUFBTCxDQUFVLElBQTNCO0FBQ0EsWUFBSyxNQUFMO0FBQ0g7QUFFRixHQTVCRDs7QUE4QkEsT0FBSyxLQUFMLENBQVcsV0FBWDs7QUFFQSxPQUFLLEtBQUwsR0FBYSxVQUFTLENBQVQsRUFBVyxDQUFYLEVBQWM7QUFDekIsV0FBTyxLQUFLLElBQUwsQ0FBVSxJQUFWLENBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQixLQUE1QjtBQUNELEdBRlksQ0FFWCxJQUZXLENBRU4sSUFGTSxDQUFiOztBQUlBLE9BQUssVUFBTCxHQUFrQixVQUFTLENBQVQsRUFBVyxDQUFYLEVBQWM7QUFDOUIsV0FBTyxLQUFLLGFBQUwsQ0FBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsS0FBekIsQ0FBK0IsUUFBdEM7QUFDRCxHQUZpQixDQUVoQixJQUZnQixDQUVYLElBRlcsQ0FBbEI7O0FBSUEsT0FBSyxNQUFMLEdBQWMsVUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFjO0FBQzFCLFdBQU8sS0FBSyxTQUFMLENBQWUsQ0FBZixFQUFrQixDQUFsQixDQUFQO0FBQ0QsR0FGYSxDQUVaLElBRlksQ0FFUCxJQUZPLENBQWQ7O0FBSUEsT0FBSyxFQUFMLENBQVEsZUFBUixFQUF5QixZQUFXO0FBQ2xDLFNBQUssR0FBTCxDQUFTLEdBQVQ7QUFDRCxHQUZEO0FBSUgsQ0F6RkQiLCJmaWxlIjoiYm9hcmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyaW90LnRhZzIoJ2JvYXJkJywgJzxkaXYgY2xhc3M9XCJyb3dcIiBlYWNoPVwie3JvdywgeSBpbiBib2FyZFJvd3N9XCI+IDxzcGFjZSBlYWNoPVwie3RtcCwgeCBpbiByb3d9XCIgYnY9XCJ7Z2V0VmFsKHksIHgpfVwiIG5ldz1cIntpc05ldyh5LHgpfVwiIHg9XCJ7eH1cIiB5PVwie3l9XCIgY29tYmluZWQ9XCJ7aXNDb21iaW5lZCh5LHgpfVwiIGNsYXNzPVwie25ldzogaXNOZXcoeSx4KX1cIj48L3NwYWNlPiA8L2Rpdj4nLCAnJywgJycsIGZ1bmN0aW9uKG9wdHMpIHtcbiAgICB0aGlzLmdhbWUgPSBvcHRzLmdhbWU7XG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGNsb25lTWF0cml4KG1hdHJpeCkge1xuICAgICAgdmFyIHNpemUgPSBtYXRyaXgubGVuZ3RoLCBuZXdNYXRyaXggPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHNpemU7IHkrKykge1xuICAgICAgICBuZXdNYXRyaXhbeV0gPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgc2l6ZTsgeCsrKSB7XG4gICAgICAgICAgbmV3TWF0cml4W3ldW3hdID0gbWF0cml4W3ldW3hdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3TWF0cml4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1vdmVzKG1hdHJpeCwgbW92ZXMpIHtcbiAgICAgIHZhciBzaXplID0gbWF0cml4Lmxlbmd0aCwgbmV3TWF0cml4ID0gbmV3IEFycmF5KHNpemUpO1xuICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCBzaXplOyB5KyspIHtcbiAgICAgICAgbmV3TWF0cml4W3ldID0gbmV3IEFycmF5KHNpemUpO1xuICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHNpemU7IHgrKykge1xuICAgICAgICAgIGxldCBibG9jayA9IG1hdHJpeFt5XVt4XTtcbiAgICAgICAgICBibG9jay5kZWx0YSA9IG1vdmVzW3ldW3hdO1xuICAgICAgICAgIGJsb2NrLmlzTmV3ID0gZmFsc2U7XG4gICAgICAgICAgbmV3TWF0cml4W3ldW3hdID0gYmxvY2s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdNYXRyaXg7XG4gICAgfVxuXG4gICAgdGhpcy5vbignbW91bnQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmJvYXJkUm93cyA9IGNsb25lTWF0cml4KHRoaXMuZ2FtZS5yb3dzKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9KTtcblxuICAgIHRoaXMucGFyZW50Lm9uKCduZXdnYW1lJywgKCkgPT4ge1xuICAgICAgdGhpcy5ib2FyZFJvd3MgPSBjbG9uZU1hdHJpeCh0aGlzLmdhbWUucm93cyk7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5wYXJlbnQub24oJ21vdmUnLCAoZGlyKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ21vdmUnKTtcbiAgICAgIGlmIChkaXIpIHtcblxuICAgICAgICBpZiAodGhpcy5nYW1lLmdhbWVTdGF0dXMoKSAhPSAnYWN0aXZlJykgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhc3RCb2FyZFJvd3MgPSB0aGlzLmJvYXJkUm93cyA9IHVwZGF0ZU1vdmVzKHRoaXMuYm9hcmRSb3dzLCB0aGlzLmdhbWUuZ2V0QmxvY2tNb3ZlbWVudHMoZGlyKSk7XG5cbiAgICAgICAgdmVudC50cmlnZ2VyKCdtb3ZlYmxvY2tzJyk7XG5cbiAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChkaXIpIHRoaXMuZ2FtZS5wcm9jZXNzTW92ZShkaXIpO1xuICAgICAgICAgICAgICB0aGlzLmJvYXJkUm93cyA9IGNsb25lTWF0cml4KHRoaXMuZ2FtZS5yb3dzKTtcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnRyaWdnZXIoJ21vdmVkJyk7XG5cbiAgICAgICAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIH0sIDEwMCk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5ib2FyZFJvd3MgPSB0aGlzLmdhbWUucm93cztcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICB0aGlzLm1peGluKHJpb3RBbmltYXRlKTtcblxuICAgIHRoaXMuaXNOZXcgPSBmdW5jdGlvbih5LHgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdhbWUucm93c1t5XVt4XS5pc05ldztcbiAgICB9LmJpbmQodGhpcylcblxuICAgIHRoaXMuaXNDb21iaW5lZCA9IGZ1bmN0aW9uKHkseCkge1xuICAgICAgcmV0dXJuIHRoaXMubGFzdEJvYXJkUm93c1t5XVt4XS5kZWx0YS5jb21iaW5lZDtcbiAgICB9LmJpbmQodGhpcylcblxuICAgIHRoaXMuZ2V0VmFsID0gZnVuY3Rpb24oeSx4KSB7XG4gICAgICByZXR1cm4gdGhpcy5ib2FyZFJvd3NbeV1beF07XG4gICAgfS5iaW5kKHRoaXMpXG5cbiAgICB0aGlzLm9uKCdiZWZvcmUtdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICB2ZW50Lm9mZignKicpO1xuICAgIH0pO1xuXG59KTtcbiJdfQ==
'use strict';

riot.tag2('score', '<div> <div class="label">Score</div> <div class="value">{parent.gameScore}</div> </div>', '.label { color: #fff; font-size: .8em; }', '', function (opts) {});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjb3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsS0FBSyxJQUFMLENBQVUsT0FBVixFQUFtQix5RkFBbkIsRUFBOEcsMENBQTlHLEVBQTBKLEVBQTFKLEVBQThKLFVBQVMsSUFBVCxFQUFlLENBQzVLLENBREQiLCJmaWxlIjoic2NvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyaW90LnRhZzIoJ3Njb3JlJywgJzxkaXY+IDxkaXYgY2xhc3M9XCJsYWJlbFwiPlNjb3JlPC9kaXY+IDxkaXYgY2xhc3M9XCJ2YWx1ZVwiPntwYXJlbnQuZ2FtZVNjb3JlfTwvZGl2PiA8L2Rpdj4nLCAnLmxhYmVsIHsgY29sb3I6ICNmZmY7IGZvbnQtc2l6ZTogLjhlbTsgfScsICcnLCBmdW5jdGlvbihvcHRzKSB7XG59KTtcbiJdfQ==
'use strict';

riot.tag2('size', '<div each="{val, i in sizes}" onclick="{setSize}"> {val} <span if="{val === parent.boardSize}">&#10004;</span> </div>', 'size div { cursor: pointer; padding: 4px; }', '', function (opts) {

    this.sizes = [2, 3, 4, 5, 6, 7, 8, 9, 10];

    this.setSize = function (e) {
        this.parent.setBoardSize(e.item.val);
    }.bind(this);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpemUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxLQUFLLElBQUwsQ0FBVSxNQUFWLEVBQWtCLHVIQUFsQixFQUEySSw2Q0FBM0ksRUFBMEwsRUFBMUwsRUFBOEwsVUFBUyxJQUFULEVBQWU7O0FBRXpNLFNBQUssS0FBTCxHQUFhLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsRUFBekIsQ0FBYjs7QUFFQSxTQUFLLE9BQUwsR0FBZSxVQUFTLENBQVQsRUFBWTtBQUN6QixhQUFLLE1BQUwsQ0FBWSxZQUFaLENBQXlCLEVBQUUsSUFBRixDQUFPLEdBQWhDO0FBQ0QsS0FGYyxDQUViLElBRmEsQ0FFUixJQUZRLENBQWY7QUFJSCxDQVJEIiwiZmlsZSI6InNpemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyaW90LnRhZzIoJ3NpemUnLCAnPGRpdiBlYWNoPVwie3ZhbCwgaSBpbiBzaXplc31cIiBvbmNsaWNrPVwie3NldFNpemV9XCI+IHt2YWx9IDxzcGFuIGlmPVwie3ZhbCA9PT0gcGFyZW50LmJvYXJkU2l6ZX1cIj4mIzEwMDA0Ozwvc3Bhbj4gPC9kaXY+JywgJ3NpemUgZGl2IHsgY3Vyc29yOiBwb2ludGVyOyBwYWRkaW5nOiA0cHg7IH0nLCAnJywgZnVuY3Rpb24ob3B0cykge1xuXG4gICAgdGhpcy5zaXplcyA9IFsyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF07XG5cbiAgICB0aGlzLnNldFNpemUgPSBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLnBhcmVudC5zZXRCb2FyZFNpemUoZS5pdGVtLnZhbCk7XG4gICAgfS5iaW5kKHRoaXMpXG5cbn0pO1xuIl19
'use strict';

riot.tag2('space', '<block if="{opts.bv.val != 0}" bv="{opts.bv}" new="{opts.new}" combined="{opts.combined}" moving="{isMoving(y,x)}"> </block>', '', '', function (opts) {
  var _this = this;

  this.mixin(riotAnimate);

  this.isMoving = function (y, x) {
    return this.boardRows[y][x].delta.dx || this.boardRows[y][x].delta.dy;
  }.bind(this);

  this.on('mount', function () {
    _this.block = opts.bv;
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwYWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsS0FBSyxJQUFMLENBQVUsT0FBVixFQUFtQiw4SEFBbkIsRUFBbUosRUFBbkosRUFBdUosRUFBdkosRUFBMkosVUFBUyxJQUFULEVBQWU7QUFBQTs7QUFFdEssT0FBSyxLQUFMLENBQVcsV0FBWDs7QUFFQSxPQUFLLFFBQUwsR0FBZ0IsVUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFjO0FBQzVCLFdBQU8sS0FBSyxTQUFMLENBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQixLQUFyQixDQUEyQixFQUEzQixJQUFpQyxLQUFLLFNBQUwsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLEtBQXJCLENBQTJCLEVBQW5FO0FBQ0QsR0FGZSxDQUVkLElBRmMsQ0FFVCxJQUZTLENBQWhCOztBQUlBLE9BQUssRUFBTCxDQUFRLE9BQVIsRUFBaUIsWUFBTTtBQUNyQixVQUFLLEtBQUwsR0FBYSxLQUFLLEVBQWxCO0FBQ0QsR0FGRDtBQUlILENBWkQiLCJmaWxlIjoic3BhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyaW90LnRhZzIoJ3NwYWNlJywgJzxibG9jayBpZj1cIntvcHRzLmJ2LnZhbCAhPSAwfVwiIGJ2PVwie29wdHMuYnZ9XCIgbmV3PVwie29wdHMubmV3fVwiIGNvbWJpbmVkPVwie29wdHMuY29tYmluZWR9XCIgbW92aW5nPVwie2lzTW92aW5nKHkseCl9XCI+IDwvYmxvY2s+JywgJycsICcnLCBmdW5jdGlvbihvcHRzKSB7XG5cbiAgICB0aGlzLm1peGluKHJpb3RBbmltYXRlKTtcblxuICAgIHRoaXMuaXNNb3ZpbmcgPSBmdW5jdGlvbih5LHgpIHtcbiAgICAgIHJldHVybiB0aGlzLmJvYXJkUm93c1t5XVt4XS5kZWx0YS5keCB8fCB0aGlzLmJvYXJkUm93c1t5XVt4XS5kZWx0YS5keTtcbiAgICB9LmJpbmQodGhpcylcblxuICAgIHRoaXMub24oJ21vdW50JywgKCkgPT4ge1xuICAgICAgdGhpcy5ibG9jayA9IG9wdHMuYnY7XG4gICAgfSk7XG5cbn0pO1xuIl19
'use strict';

riot.tag2('winlose', '<div animate="bounceIn" animate-leave="bouceOut" animate-duration="300ms"> <yield></yield> </div>', '', '', function (opts) {

  this.mixin(riotAnimate);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpbmxvc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxLQUFLLElBQUwsQ0FBVSxTQUFWLEVBQXFCLG1HQUFyQixFQUEwSCxFQUExSCxFQUE4SCxFQUE5SCxFQUFrSSxVQUFTLElBQVQsRUFBZTs7QUFFL0ksT0FBSyxLQUFMLENBQVcsV0FBWDtBQUVELENBSkQiLCJmaWxlIjoid2lubG9zZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInJpb3QudGFnMignd2lubG9zZScsICc8ZGl2IGFuaW1hdGU9XCJib3VuY2VJblwiIGFuaW1hdGUtbGVhdmU9XCJib3VjZU91dFwiIGFuaW1hdGUtZHVyYXRpb249XCIzMDBtc1wiPiA8eWllbGQ+PC95aWVsZD4gPC9kaXY+JywgJycsICcnLCBmdW5jdGlvbihvcHRzKSB7XG5cbiAgdGhpcy5taXhpbihyaW90QW5pbWF0ZSk7XG5cbn0pOyJdfQ==
//# sourceMappingURL=2048.js.map
